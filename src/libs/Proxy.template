<?php
namespace doublemcz\dibiorm\proxies\##CLASS_NAMESPACE##;

use doublemcz\dibiorm\Manager;
use doublemcz\dibiorm\IProxy;

class ##CLASS_NAME## extends ##BASE_CLASS## implements IProxy {
	/** @var object */
	private $relationClass;
	/** @var Manager */
	private $manager;
	/** @var bool */
	private $isInitialized = FALSE;
   /** @var string */
   private $key;
   /** @var array */
   private $values;

	/**
	 * @param Manager $manager
	 * @param object $class
	 * @param string $key
	 */
	public function __construct(Manager $manager, $relationClass, $key)
	{
		$this->manager = $manager;
		$this->relationClass = $relationClass;
		$this->key = $key;
	}

	public function &__get($property)
	{
		if (!$this->isInitialized) {
			$this->load();
		}

		if (array_key_exists($property, $this->values)) {
         return $this->values[$property];
      }

      throw new \InvalidArgumentException('You are trying to get non-existing property.');
	}

	public function __set($property, $value)
   {
      if (array_key_exists($property, $this->values)) {
         $this->values[$property] = $value;
         return $this;
      }

      throw new \InvalidArgumentException('You are trying to set non-existing property.');
   }

   public function __call($method, $arguments)
   {
      if (!$this->isInitialized) {
         $this->load();
      }

      return call_user_method($method, $this, $arguments);
   }

   private function load()
   {
      if ($this->isInitialized) {
         return;
      }

      $this->isInitialized = true;
      $this->manager->loadProxy($this);
   }

   /**
    * @return object
    */
   public function getRelationClass()
   {
      return $this->relationClass;
   }

   /**
    * @return string Returns property name in the related class where @oneToOne was specified
    */
   public function getKey()
   {
      return $this->key;
   }
}